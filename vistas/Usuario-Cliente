<?php
require_once('config.php');

/**
 * Clase encargada de gestionar los datos almacenados en la BBDD asociados a un usuario
 * 
 * @package          Controlador
 * @subpackage       Usuarios
 */
class Usuario{
    
    /**
     * Conexión con la bbdd para los métodos no estáticos
     * @var object
     */
    private $db;
    
    /**
     * @var integer
     */
    private $id;
    
    /**
     * @var string
     */
    private $nombre;
    
    /**
     * @var string
     */
    private $apellidos;
    
    /**
     * @var string
     */
    private $dni;
    
    /**
     * @var string
     */
    private $tlfno;
    
    /**
     * @var string
     */
    private $email;
    
    /**
     * @var DateTime
     */
    private $fecha_alta;
    
    /**
     * Constructor de la clase
     * @param integer $id
     */
    public function __construct($id=null){
        $this->db = new BDmysqli();
        if(is_numeric($id)){
            
            $loged_user_id = isset($_SESSION['ID'])?$_SESSION['ID']:null;
            $loged_user_id_role = isset($_SESSION['id_role'])?$_SESSION['id_role']:null;
            if($loged_user_id != null && $loged_user_id_role != '1' && $loged_user_id != $id){
                //Un usuario consultor no debería ver los datos de otros usuarios
                return;
            }
            
            $this->id = $id;
            $this->load();
        }else if($id != null){
            throw new Exception("Identificador de usuario err&oacute;neo.");
        }
    }
    
    /**
     * Carga los datos principales desde la bbdd
     * @throws Exception Error de comunicación con la bbdd
     */
    private function load(){
        $sql = "SELECT * FROM usuarios WHERE ID = '{$this->id}';";
        $res = $this->db->query($sql);
        if(!$res || $res->num_rows <= 0){
            throw new Exception("Error al cargar el usuario de la BBDD");
        }
        $u = $res->fetch_object();
        
        $this->nombre = $u->nombre;
        $this->apellidos = $u->apellidos;
        $this->dni = $u->dni;
        $this->tlfno = $u->tlfno;
        $this->email = $u->email;
        $this->fecha_alta = ($u->fecha_alta != 0)?new DateTime($u->fecha_alta):'';
    }
    
    /**
     * Método para la inserción y edición de usuarios.
     * Si previamente se ha llamado al constructor sin pasarle un ID, se registra. En caso
     * contrario este método modifica los datos del usuario.
     *
     * Para crear un usuario:
     *     $U = new Usuario(); //Sin id...
     *     $U->save($data);
     *
     * Para actualizar un usuario existente:
     *     $U = new Usuario($id);
     *     $U->save($data);
     *
     * Se elevarán las excepciones con los mensajes pertinentes ante errores en los datos de entrada.
     *
     * @param array $data
     * @throws Exception
     */
    public function save($data){
        if(isset($this->id)){
    
            //Modificando
            $array_fields = array();
            
            
            if(isset($data['nombre']) && trim($data['nombre']) != ''){
                $this->nombre = $this->db->real_escape_string($data['nombre']);
                array_push($array_fields, "nombre = '{$this->nombre}'");
            }
            if(isset($data['apellidos']) && trim($data['apellidos']) != ''){
                $this->apellidos = $this->db->real_escape_string($data['apellidos']);
                array_push($array_fields, "apellidos = '{$this->apellidos}'");
            }
            if(isset($data['dni']) && trim($data['dni']) != ''){
                $this->dni = $this->db->real_escape_string($data['dni']);
                array_push($array_fields, "dni = '{$this->dni}'");
            }
            if(isset($data['tlfno']) && $data['tlfno'] != ''){
                $this->tlfno = $this->db->real_escape_string($data['tlfno']);
                array_push($array_fields, "tlfno = '{$this->tlfno}'");
            }
            if(isset($data['email']) && $data['email'] != ''){
                $this->email = $this->db->real_escape_string($data['email']);
                array_push($array_fields, "email = '{$this->email}'");
            }
            
            if(count($array_fields) > 0){
                $sql_fields = implode(', ', $array_fields);
                $sql = "UPDATE usuarios SET {$sql_fields} WHERE ID = '{$this->id}';";
        
                if(!$this->db->query($sql)){
                    throw new Exception("Error actualizando los datos del usuario en la BBDD: ". $this->db->error);
                }
            }
            
    
        } else {
            
            //Registrando un usuario
            if(isset($data['usuario']) && trim($data['usuario']) != ''){
                $this->usuario = $this->db->real_escape_string($data['usuario']);
                $sql = "SELECT ID FROM usuarios WHERE usuario = '{$this->usuario}'; ";
                $res = $this->db->query($sql);
                if($res->num_rows > 0){
                    throw new Exception("Nombre de usuario duplicado.");
                }
            } else {
                throw new Exception("Debe introducir un nombre de usuario.");
            }
    
            if(isset($data['nombre']) && trim($data['nombre']) != ''){
                $this->nombre = $this->db->real_escape_string($data['nombre']);
            } else {
                throw new Exception("Debe introducir un nombre para el usuario.");
            }
    
            if(isset($data['apellidos']) && trim($data['apellidos']) != ''){
                $this->apellidos = $this->db->real_escape_string($data['apellidos']);
            } else {
                throw new Exception("Debe introducir los apellidos del usuario.");
            }            
            
            if(isset($data['tlfno']) && trim($data['tlfno']) != ''){
                $this->tlfno = $this->db->real_escape_string($data['tlfno']);
            } else {
                throw new Exception("Debe introducir el tel&eacute;fono del usuario.");
            }
            
            if(isset($data['email']) && trim($data['email']) != ''){
                $this->email = $this->db->real_escape_string($data['email']);
            } else {
                throw new Exception("Debe introducir el email del usuario.");
            }
    
            if(isset($data['dni']) && is_numeric($data['dni'])){
                $dni = trim($data['dni']);
            } else {
                throw new Exception("Debe especificar el dni");
            }
    
            $this->fecha_alta = new DateTime();
            $fecha_alta = $this->fecha_alta->format("Y-m-d H:i:s");
            
            $sql = "INSERT INTO usuarios (usuario, nombre, apellidos, tlfno, email, dni, fecha_alta)
                    VALUES ('{$this->usuario}', '{$this->nombre}', '{$this->apellidos}', '{$this->dni}', '{$this->tlfno}', '{$this->email}', '{$fecha_alta}');";
            
            if(!$this->db->query($sql)){
                throw new Exception("Error registrando el usuario en la BBDD: ". $this->db->error);
            }
            
            $this->id = $this->db->insert_id;
            
        }
    }
    
    
    /**
     * Marca como eliminado un usuario del sistema. Por si acaso
     */
    public function bajaUsuario(){
        if(isset($this->id)){
            $sql = "UPDATE usuarios SET eliminado = '1' WHERE ID = '{$this->id}';";
            if(!$this->db->query($sql)){
                throw new Exception("Error dando de baja el usuario en la BBDD: ". $this->db->error);
            }
        }
    }
    
    /**
     * Devuelve el identificador de usuario
     * @return integer
     */
    public function getID(){
        return $this->id;
    }
    
    
    /**
     * Devuelve el nombre completo del usuario
     * @return string
     */
    public function getNombre(){
        return $this->nombre;
    }
    
    /**
     * Devuelve los apellidos del usuario
     * @return string
     */
    public function getApellidos(){
        return $this->apellidos;
    }
    
    /**
     * Devuelve el dni del usuario
     * @return string
     */
    public function getDNI(){
        return $this->dni;
    }
    
    
    /**
     * Devuelve el número de teléfono del usuario
     * @return string
     */
    public function getTlfno(){
        return $this->tlfno;
    }
    
    /**
     * Devuelve el email del usuario
     * @return string
     */
    public function getEmail(){
        return $this->email;
    }
    
    
    
    /**
     * Devuelve un array asociativo con los permisos del usuario:
     *     'lectura'        => TRUE/FALSE
     *     'escritura'      => TRUE/FALSE
     *     'administracion' => TRUE/FALSE
     * @return array('lectura', 'escritura', 'administracion')
     */
    public function getPermisos(){
        //Administrador
        if($this->id_role == '1'){
            return array('lectura' => TRUE
                         , 'escritura' => TRUE
                         , 'administracion' => TRUE
            );
        //Consultor
        }else if($this->id_role == '2'){
            return array('lectura' => TRUE
                    , 'escritura' => FALSE
                    , 'administracion' => FALSE
            );
        }
        
        //Default
        return array('lectura' => FALSE
                , 'escritura' => FALSE
                , 'administracion' => FALSE
        );
    }
    
    /**
     * Devuelve true si el usuario ha sido dado de baja del sistema
     * @return bool
     */
    public function eliminado(){
        return $this->eliminado == '1';
    }
    
    /**
     * Devuelve la fecha de alta del usuario
     * @return string DD-MM-YYYY hh:mm
     */
    public function getFechaAlta(){
    	if(@get_class($this->fecha_alta) == 'DateTime'){
    		return $this->fecha_alta->format('d-m-Y H:i');
    	} else {
    		return "";
    	}
    }
    
    /*
     * --------------------------------------------------------
     * Métodos estáticos
     * --------------------------------------------------------
     */
    
    
    
    /**
     * Devuelve un array asociativo con los siguientes elementos:
     *     'lista': los IDs de los usuarios que cumplan los criterios pasados en el array $params
     *     'total': Número total de resultados sin paginar
     *     'pagina': Página actual de la búsqueda
     *     'paso': Número de resultados por página
     * @param array $params Array asociativo con los campos a filtrar y sus valores
     * @return array(lista, total, pagina, paso)
     */
    public static function search($params=array()){
        $db = new BDmysqli();
    
        //Defaults
        $matchs = array();
        $filters = array(" u.eliminado = '0' ");
        $order = array("u.ID");
        
        $loged_user_id = $_SESSION['ID'];
        $loged_user_id_role = $_SESSION['id_role'];
        if($loged_user_id_role != '1'){
        	array_push($filters, "u.ID = '{$loged_user_id}'");
        }
        
        if(isset($params['order']) && trim($params['order']) != ''){
        	if(isset($params['order_sense']) && trim($params['order_sense']) == 'desc'){
        		$order_sense = "ASC";
        	} else {
        		$order_sense = "DESC";
        	}
        	$order_name = trim($params['order']);
        	switch($order_name){
        		case 'id':
        			$order = array("u.ID $order_sense");
        			break;
        		case 'nombre':
        			$order = array("u.nombre $order_sense");
        			break;
        		case 'dni':
        			$order = array("u.dni $order_sense");
        			break;
        		case 'fecha_alta':
        			$order = array("u.fecha_alta $order_sense");
        			break;
        	}
        }
        
        //Para obtener la lista completa de usuarios (útil para el filtro del historial)
        if(isset($params['all']) && trim($params['all']) == '1'){
            $filters = array(" 1 ");
        }
        
        if(isset($params['nombre']) && trim($params['nombre']) != ''){
            $nombre = $db->real_escape_string($params['nombre']);
            array_push($matchs, "MATCH(u.nombre) AGAINST ('{$nombre}' IN BOOLEAN MODE) AS match_nombre");
            array_push($filters, "MATCH(u.nombre) AGAINST ('{$nombre}' IN BOOLEAN MODE)");
            array_push($order, "match_nombre DESC");
        }
    
        if(isset($params['apellidos']) && trim($params['apellidos']) != ''){
            $apellidos = $db->real_escape_string($params['apellidos']);
            array_push($matchs, "MATCH(u.apellidos) AGAINST ('{$apellidos}' IN BOOLEAN MODE) AS match_apellidos");
            array_push($filters, "MATCH(u.apellidos) AGAINST ('{$apellidos}' IN BOOLEAN MODE)");
            array_push($order, "match_apellidos DESC");
        }
        
        if(isset($params['cadena']) && trim($params['cadena']) != ''){
        	$cadena = $db->real_escape_string($params['cadena']);
        	array_push($filters, "(u.usuario LIKE '%{$cadena}%' OR u.nombre LIKE '%{$cadena}%' OR u.apellidos LIKE '%{$cadena}%')");
        }
        
        if(isset($params['tlfno']) && trim($params['tlfno']) != ''){
            $tlfno = $db->real_escape_string($params['tlfno']);
            array_push($filters, "u.tlfno LIKE '{$tlfno}%'");
        }
        
        if(isset($params['email']) && trim($params['email']) != ''){
            $email = $db->real_escape_string($params['email']);
            array_push($filters, "u.email LIKE '{$email}%'");
        }
        
        if(isset($params['fecha_alta_desde']) || isset($params['fecha_alta_hasta'])){
        	if(isset($params['fecha_alta_desde']) && trim($params['fecha_alta_desde']) != ''){
        		$fecha_desde = DateTime::createFromFormat("d/m/Y H:i:s", $params['fecha_alta_desde'] . "00:00:00");
        	} else {
        		$fecha_desde = new DateTime("0000-00-00 00:00:00");
        	}
        
        	if(isset($params['fecha_alta_hasta']) && trim($params['fecha_alta_hasta']) != ''){
        		$fecha_hasta = DateTime::createFromFormat("d/m/Y H:i:s", $params['fecha_alta_hasta'] . "23:59:59");
        	} else {
        		$fecha_hasta = new DateTime();
        	}
        
        	$fecha_alta_desde = $fecha_desde->format("Y-m-d H:i:s");
        	$fecha_alta_hasta = $fecha_hasta->format("Y-m-d H:i:s");
        	array_push($filters, "u.fecha_alta BETWEEN '{$fecha_alta_desde}' AND '{$fecha_alta_hasta}'");
        }
        
        //Paginado
        $limit = "";
        if(isset($params['page']) || isset($params['paso'])){
            $page = (isset($params['page']) && is_numeric($params['page']))? $params['page'] : '1';
            $paso = (isset($params['paso']) && is_numeric($params['paso']))? $params['paso'] : '20';
            $limit = "LIMIT ".($page - 1) * $paso.",$paso ";
        }
        
        
    
    
        $res = $db->query($sql);
        if($res){
            $resultados = array();
            $resultados['lista'] = array();
            $resultados['pagina'] = (isset($page)?$page:'0');
            $resultados['paso'] = (isset($paso)?$paso:'-');
        
            $res_rows = $db->query("SELECT FOUND_ROWS();")->fetch_array();
            $num_rows = $res_rows[0];
            $resultados['total'] = $num_rows;
        
            while($row = $res->fetch_array(MYSQLI_ASSOC)){
                array_push($resultados['lista'], $row['ID']);
            }
            $res->close();
    
            return $resultados;
        }
        else{
            throw new Exception("(Usuario::search) Error: ".$db->error);
        }
    }
}
?>
